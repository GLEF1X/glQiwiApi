This section covers the most popular use cases of glQiwiApi.

How can I retrieve transactions?
--------------------------------


.. code-block:: python

    import asyncio

    from glQiwiApi import QiwiWrapper


    async def get_transactions(qiwi_token: str, phone_number: str) -> None:
        async with QiwiWrapper(api_access_token=qiwi_token, phone_number=phone_number) as wallet:
            bunch_of_transactions = await wallet.transactions()


    asyncio.run(get_transactions(qiwi_token="qiwi api token", phone_number="+phone number"))



How can I transfer money to other wallet?
-----------------------------------------

.. code-block:: python

    import asyncio

    from glQiwiApi import QiwiWrapper


    async def transfer_money_to_another_wallet(qiwi_token: str, phone_number: str) -> None:
        async with QiwiWrapper(api_access_token=qiwi_token, phone_number=phone_number) as wallet:
            await wallet.transfer_money(to_number="+754545343", amount=1)


    asyncio.run(transfer_money_to_another_wallet(qiwi_token="token", phone_number="+phone number"))

How can I transfer money to other card?
---------------------------------------

.. code-block:: python

    import asyncio

    from glQiwiApi import QiwiWrapper


    async def transfer_money_to_card(qiwi_token: str, phone_number: str) -> None:
        async with QiwiWrapper(api_access_token=qiwi_token, phone_number=phone_number) as wallet:
            await wallet.transfer_money_to_card(card_number="desired card number", amount=50)


    asyncio.run(transfer_money_to_card(qiwi_token="token", phone_number="+phone number"))


How can I gracefully handle exceptions that may return API?
-----------------------------------------------------------

In most cases you just wrap the statement with method of API with `try/except` and then on demand get message(in json or plain text)
and log it

.. code-block:: python

    from glQiwiApi import QiwiWrapper, APIError

    # missing asyncio details...

    async with QiwiWrapper(api_access_token=qiwi_token, phone_number=phone_number) as wallet:
        try:
            await wallet.transfer_money(to_phone_number="wrong number", amount=-1)
        except APIError as ex:
            ex.json()  # log it on demand
            ex.message  # log it on demand


How to interact with P2P API?
-----------------------------

To create p2p bill you have to utilize `create_p2p_bill` method.

.. code-block:: python

   import asyncio

   from glQiwiApi import QiwiWrapper


   async def create_p2p_bill():
       async with QiwiWrapper(secret_p2p="your p2p token") as wallet:
           bill = await wallet.create_p2p_bill(amount=1)
           print(f"Link to pay bill with {bill.bill_id} id = {bill.pay_url}")


   asyncio.run(create_p2p_bill())

If you go to the created link, you will see this:


.. image:: https://i.ibb.co/T0C5RYz/2021-03-21-14-58-33.png
   :width: 700
   :alt: bill form example

Obviously, you have to check this bill someway.
You can use handy label `bill.check` or do it in standard way `wallet.check_p2p_bill_status(bill.bill_id)`
and then check that status equals appropriate value.

.. tip:: To reject p2p bill you should use `reject_p2p_bill` or label `bill.reject()`

.. code-block:: python

   import asyncio

   from glQiwiApi import QiwiWrapper


   async def brief_example_with_label():
       async with QiwiWrapper(secret_p2p="your p2p token") as wallet:
           bill = await wallet.create_p2p_bill(amount=777)
       if await bill.check():
          print("It's ok")

   async def sloppy_version():
       async with QiwiWrapper(secret_p2p="your p2p token") as wallet:
           bill = await wallet.create_p2p_bill(amount=777)
       status = await wallet.check_p2p_bill_status(bill.bill_id)
       if status == "PAID":
           print("It's ok")
       else:
           print("Bill was not paid")



More methods you can figure out in  :doc:`autogenerated API docs <API/index>`